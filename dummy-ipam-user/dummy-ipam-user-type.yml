tosca_definitions_version: alien_dsl_1_4_0

metadata:
  template_name: dummy-ipam-user-type
  template_version: 1.4.0-SNAPSHOT
  template_author: gkatsaros

description: Starting a simple http server as a dummy ipam

imports:
  - tosca-normative-types:1.0.0-ALIEN14
  - abstract-ipam-type:1.4.0-SNAPSHOT


node_types:
  org.alien4cloud.nodes.IPAMUser:
    derived_from: tosca.nodes.SoftwareComponent
    description: IPAM User APP install
    properties:
      username:
        type: string
    requirements:
      - host: # Overrides the parent host requirement to add a specific node_filter and add OS constraints as Impl is based on apt and so restricted to debian.
          capability: tosca.capabilities.Container
          node: tosca.nodes.Compute
          relationship: tosca.relationships.HostedOn
          occurrences: [1, 1]
          node_filter:
            capabilities:
              - tosca.capabilities.OperatingSystem:
                  properties:
                    - type: { equal: linux }
                    - architecture: { equal: x86_64 }
                    - distribution: { valid_values: [ debian, ubuntu, knoppix ] }
      - ipam:
          capability: org.alien4cloud.capabilities.IPAMEndpoint
          relationship: org.alien4cloud.relationships.IPAMUSerConnectIPAM
          occurrences: [1, 1]
    interfaces:
      Standard:
        create: scripts/install_ipam_user_server.sh

relationship_types:
  org.alien4cloud.relationships.IPAMUSerConnectIPAM:
    derived_from: tosca.relationships.ConnectsTo
    description: Relationship use to connect the IPAM User with an IPAM system
    valid_target_types: [ org.alien4cloud.capabilities.IPAMEndpoint ]
    interfaces:
      Configure:
          pre_configure_source:
            inputs:
              IPAM_IP: { get_attribute: [TARGET, ip_address] }
              USER_NAME: { get_property: [SOURCE, username] }
            implementation: scripts/config_ipamuser_for_ipam.sh

